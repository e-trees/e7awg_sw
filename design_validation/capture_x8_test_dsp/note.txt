実行方法
	1. capture_module_test デザインをコンフィギュレーションする
	2. pipenv shell
	3. capture_x8_test_dsp.py のあるディレクトリに移動
	4. python capture_x8_test_dsp.py [--num-tests=テスト回数] [--server-ipaddr=LabRAD サーバのIPアドレス] [--labrad]

結果の確認
	All tests succeeded. と表示されればテスト成功

テストの内容
	各 DSP ユニットをそれぞれ 1 つだけ有効にした場合と全て有効にした場合をテストする.
	キャプチャパラメータをランダムに設定し, HW と SW で DSP を適用したキャプチャデータが一致するか確認する.
	テストデータを短くしてテストを高速化したい場合は capturetestdsp.py の __gen_capture_param() の
	num_sum_sections と capture_param.num_integ_sections を変更する.
	キャプチャデータとキャプチャパラメータは result 以下に保存される.

----------------------------

RTL シミュレーション用のデータ出力だけを実行する方法
	python capture_x8_test_dsp.py --skip-test --output-sim-data

実行すると，`result/000/*/sim/` 以下に，シミュレーション用のデータが生成されます．
生成されるデータは，

cap_param_{0,2,4,7}.txt :
  キャプチャモジュール 0, 2, 4, 7 の設定値
  行ごとに，16進数文字列で書かれたアドレスとデータのペアです．

wave_sequence_{2,15}.txt :
 キャプチャモジュールへの入力データ
 wave_sequence_2.txtのデータがキャプチャモジュール0と2へ，
 wave_sequence_15.txtのデータがキャプチャモジュール4と7へ，それぞれ供給されます．
 行が時系列に相当する16進数文字列のデータです．


cap_data_{0,2,4,7}.txt :
 キャプチャモジュール 0, 2, 4, 7 から出力される期待値

です．
